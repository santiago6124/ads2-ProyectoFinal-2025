version: '3.8'

services:
  # Portfolio API Service
  portfolio-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: portfolio-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Server Configuration
      - PORT=8080
      - HOST=0.0.0.0
      - GIN_MODE=release

      # Database Configuration
      - DB_URI=mongodb://portfolio-mongo:27017/portfolio_db
      - DB_NAME=portfolio_db
      - DB_MAX_POOL_SIZE=100
      - DB_MIN_POOL_SIZE=10
      - DB_MAX_IDLE_TIME=300
      - DB_CONNECT_TIMEOUT=30
      - DB_SOCKET_TIMEOUT=60

      # Redis Configuration
      - REDIS_HOST=portfolio-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - REDIS_MAX_RETRIES=3
      - REDIS_POOL_SIZE=10
      - REDIS_MIN_IDLE_CONNECTIONS=5

      # Cache TTL Configuration
      - CACHE_PORTFOLIO_TTL=1h
      - CACHE_PERFORMANCE_TTL=30m
      - CACHE_SNAPSHOT_TTL=24h
      - CACHE_CALCULATION_TTL=15m

      # RabbitMQ Configuration
      - RABBITMQ_URL=amqp://guest:guest@portfolio-rabbitmq:5672/
      - RABBITMQ_EXCHANGE=portfolio_events
      - RABBITMQ_QUEUE=portfolio_calculations
      - RABBITMQ_ROUTING_KEY=portfolio.calculate

      # External APIs Configuration
      - MARKET_DATA_API_URL=http://market-data-api:8081
      - ORDERS_API_URL=http://orders-api:8082
      - USERS_API_URL=http://users-api:8083
      - API_TIMEOUT=30s
      - API_RETRY_COUNT=3

      # Authentication Configuration
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRY=24h
      - JWT_ISSUER=portfolio-api

      # Logging Configuration
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - LOG_OUTPUT=both
      - LOG_FILENAME=/app/logs/portfolio-api.log
      - LOG_MAX_SIZE=100
      - LOG_MAX_AGE=30
      - LOG_MAX_BACKUPS=5
      - LOG_COMPRESS=true

      # Performance Configuration
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_WINDOW=1h
      - REQUEST_TIMEOUT=30s
      - MAX_REQUEST_SIZE=10MB

      # Scheduler Configuration
      - SCHEDULER_ENABLED=true
      - PORTFOLIO_CALC_CRON=0 */15 * * * *
      - SNAPSHOT_CRON=0 0 * * * *
      - CLEANUP_CRON=0 2 * * * *

      # Risk Configuration
      - RISK_FREE_RATE=0.02

    volumes:
      - portfolio-logs:/app/logs
      - portfolio-configs:/app/configs
    depends_on:
      - portfolio-mongo
      - portfolio-redis
      - portfolio-rabbitmq
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB Database
  portfolio-mongo:
    image: mongo:7.0
    container_name: portfolio-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=portfolio_db
    volumes:
      - portfolio-mongo-data:/data/db
      - portfolio-mongo-config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - portfolio-network
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  portfolio-redis:
    image: redis:7.2-alpine
    container_name: portfolio-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - portfolio-redis-data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - portfolio-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # RabbitMQ Message Broker
  portfolio-rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: portfolio-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - portfolio-rabbitmq-data:/var/lib/rabbitmq
      - ./configs/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

  # MongoDB Express (Optional - for development)
  portfolio-mongo-express:
    image: mongo-express:1.0.2
    container_name: portfolio-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:admin123@portfolio-mongo:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - portfolio-mongo
    networks:
      - portfolio-network
    profiles:
      - development

  # Redis Commander (Optional - for development)
  portfolio-redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: portfolio-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:portfolio-redis:6379
    depends_on:
      - portfolio-redis
    networks:
      - portfolio-network
    profiles:
      - development

  # Prometheus (Optional - for monitoring)
  portfolio-prometheus:
    image: prom/prometheus:v2.47.0
    container_name: portfolio-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - portfolio-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - portfolio-network
    profiles:
      - monitoring

  # Grafana (Optional - for monitoring)
  portfolio-grafana:
    image: grafana/grafana:10.1.0
    container_name: portfolio-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - portfolio-grafana-data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - portfolio-prometheus
    networks:
      - portfolio-network
    profiles:
      - monitoring

# Networks
networks:
  portfolio-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  portfolio-mongo-data:
    driver: local
  portfolio-mongo-config:
    driver: local
  portfolio-redis-data:
    driver: local
  portfolio-rabbitmq-data:
    driver: local
  portfolio-logs:
    driver: local
  portfolio-configs:
    driver: local
  portfolio-prometheus-data:
    driver: local
  portfolio-grafana-data:
    driver: local